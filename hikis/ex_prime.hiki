!課題
作成したisprime関数を用いて，100 までの素数をすべて求めて出力するプログラムを作れ. 

!課題2
i番目の素数を返す関数ithprimeをつくれ. 
!エラトステネスのふるい
100 までの素数をすべて求めて出力するプログラムを作れ. 

ヒント：エラトステネスのふるいが比較的簡単. 初めに0から100までの配列を用意し0で初期化する. これを番兵と見なして，まず2の倍数(2自身は除く)に全部印をつける. 次に，3の倍数(3自身は除く)に全部印をつける. こうして，100まで繰り返し，印がつかないで残っている数は「どの数の倍数でもない数」であるから素数である. 

<<<
表 1: 番兵 (配列) の変化の様子. 
要素     1  2  3  4 5 6 7 8 9 10 ... 98 99 100 
初期値   0  0  0  0 0 0 0 0 0 0  ...  0  0   0  
2 が終了 0 [0] 0  1 0 1 0 1 0 1  ...  1  0   1  
3 が終了 0  0 [0] 1 0 1 0 1 1 1  ...  1  1   1  
>>>

!双子素数(twin_primes)
pも素数で，p+2も素数の時，これらを双子素数という．1から100までの双子素数を探せ．
<<< ruby
class Integer
  def prime?
      #    p self
      nmax=Math.sqrt(self).to_i
      for i in 2..nmax do
      if self%i==0 then
#        p i
        return false
      end
    end
    return true
  end
end

p 13.prime?
p 113.prime?
p 131.prime?
p 133.prime?

def twin_primes
  101.times{|i|
    print i,",",i+2,"\n" if (i.prime? and (i+2).prime?)
  }
end

twin_primes
>>>
!メルセンヌ数
n = 257 までのメルセンヌ数 (Mn = 2^n − 1) で,素数であるときの n を表示
するプログラムをつくれ.答えは,
n = 2,3,5,7,13,17,19,31,61,89,107,127 だけであることを確かめよ.素数かどうかの判定は isprime(Mn) でできる.
この関数の戻り値は真偽 (true or false) であるので,条件文 (if 文) で使える.

!ドリーン・アンドリカ
ドリーン・アンドリカは，$n$番目の素数を$p_n$とすると，すべての$n$に対して$\sqrt(p_(n+1))-\sqrt(p_(n))<1$が成立すると予想している．$n$を1000未満としたとき，最も大きな差は$\sqrt(11)-\sqrt(7)=0.670873\cdots$であり，確かに1を下回っている．このことを確かめるプログラムを作れ．(20点）

ヒント：$i$番目の素数はithprime(i)で求められる．

!いとこ素数
いとこ素数とは，差が4である素数の組のことである．200未満のいとこ素数を表示するプログラムを作れ．正しくは14組だが，13組でもよい．

!ソフィ・ジェルマン(Sophi Germain)素数
ソフィ・ジェルマン(Sophi Germain)素数とは，pが素数でかつ2p+1もまた素数のpをさす．100以下のソフィ・ジェルマン素数を求めよ．

!メルセンヌ(Mersenne)素数
メルセンヌ(Mersenne)素数とは，qが素数でかつ2^q-1もまた素数のqをさす．100以下のメルセンヌ素数を求めよ．

!4n+1の形の素数
この形の素数はふたつの平方数の和に一意的に分解される。詳しくは高木貞治『初等整数論講義』参照。

!階乗素数 Factorial Prime
:Definition:n! +1 若しくは n!-1 の形の素数。
*n!+1 の方は n=1,2,3,11,27,37,41,73,116,154,320,340,399,427,872,1477 で素数である
*n!-1 の方は n=3,4,6,7,12,14,30,32,33,38,97,166,324,379,469,546,974,1963,3507,3610 で素数である。
*n <4580 までは確かめられているらしい。(C.Caldwell)
更に n!! +1 若しくは n!! +1 の形の素数を多階乗素数と言う。 n!!! +1 若しくは n!!! +1 等々も考えられている。 因みに n!! = n(n-2)(n-4)… 、n!!! = n(n-3)(n-6)…
:参考文献:[好田] 好田順治,『素数の不思議』, 現代数学社, 1999.

<<< ruby
class Integer
  def prime?
      #    p self
      nmax=Math.sqrt(self).to_i
      for i in 2..nmax do
      if self%i==0 then
#        p i
        return false
      end
    end
    return true
  end
end

p 13.prime?
p 113.prime?
p 131.prime?
p 133.prime?

def twin_primes
  101.times{|i|
    print i,",",i+2,"\n" if (i.prime? and (i+2).prime?)
  }
end

twin_primes
>>>
<<< ruby
for p from 1 to 100 do
  if (isprime(p) and isprime(2*p+1)) then
    print(p,2*p+1);
  end; 
end;
                              2, 5
                              3, 7
                             5, 11
                             11, 23
                             23, 47
                             29, 59
                             41, 83
                            53, 107
                            83, 167
                            89, 179

for q from 1 to 100 do
  if (isprime(q) and isprime(2^q-1)) then
    print(q);
  end; 
end;
                               2
                               3
                               5
                               7
                               13
                               17
                               19
                               31
                               61
                               89

A:=[];
for q from 1 to 100 do
  if (isprime(q) and modp(q,4)=1) then
    print(q);
    A:=[op(A),q];
  end;
end;
                               []
                               5
                               13
                               17
                               29
                               37
                               41
                               53
                               61
                               73
                               89
                               97
nA:=nops(A);
for p from 1 to nA do
 n:=A[p];
 nf:=evalf(sqrt(n)):
 for i from 1 to nf do
  for j from i to nf do
    if i^2+j^2=n then
      print(i,j,n);
      break;
    end;
  end;
 end;
end:

                               11
                            1, 2, 5
                            2, 3, 13
                            1, 4, 17
                            2, 5, 29
                            1, 6, 37
                            4, 5, 41
                            2, 7, 53
                            5, 6, 61
                            3, 8, 73
                            5, 8, 89
                            4, 9, 97

for q from 1 to 100 do
  if isprime(q!+1) then
    print(q);
  end; 
end;
                               1
                               2
                               3
                               11
                               27
                               37
                               41
                               73
                               77
for q from 1 to 100 do
  if isprime(q!-1) then
    print(q);
  end; 
end;
                               3
                               4
                               6
                               7
                               12
                               14
                               30
                               32
                               33
                               38
                               94

for i from 1 to 200 do
  if (isprime(i) and isprime(i+2) and isprime(i+6) and isprime(i+8)) then
    print(i,i+2,i+6,i+8);
  end if;
end do;
                          5, 7, 11, 13
                         11, 13, 17, 19
                       101, 103, 107, 109
                       191, 193, 197, 199
>>>